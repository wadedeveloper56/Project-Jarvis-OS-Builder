#line 1 "scanner.cpp"

#line 3 "scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* The c++ scanner is a mess. The FlexLexer.h header file relies on the
 * following macro. This is required in order to pass the c++-multiple-scanners
 * test in the regression suite. We get reports that it breaks inheritance.
 * We will address this in a future release of flex, or omit the C++ scanner
 * altogether.
 */
#define yyFlexLexer WadeSpace_FlexLexer

#ifdef yyalloc
#define WadeSpace_alloc_ALREADY_DEFINED
#else
#define yyalloc WadeSpace_alloc
#endif

#ifdef yyrealloc
#define WadeSpace_realloc_ALREADY_DEFINED
#else
#define yyrealloc WadeSpace_realloc
#endif

#ifdef yyfree
#define WadeSpace_free_ALREADY_DEFINED
#else
#define yyfree WadeSpace_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state* YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)
#define YY_LINENO_REWIND_TO(ptr)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE

struct yy_buffer_state
{
	std::streambuf* yy_input_file;

	char* yy_ch_buf; /* input buffer */
	char* yy_buf_pos; /* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	int yy_bs_lineno; /**< The line count. */
	int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void*yyalloc(yy_size_t);
void*yyrealloc(void*, yy_size_t);
void yyfree(void*);

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

inline int yyFlexLexer::yywrap() { return 1; }

int yyFlexLexer::yylex()
{
	LexerError("yyFlexLexer::yylex invoked but %option yyclass used");
	return 0;
}

#define YY_DECL int Scanner::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 102
#define YY_END_OF_BUFFER 103
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
};

static const flex_int16_t yy_accept[336] =
{
	0,
	0, 0, 103, 101, 100, 100, 89, 101, 97, 91,
	101, 59, 60, 95, 94, 57, 93, 63, 96, 43,
	42, 58, 54, 83, 65, 84, 53, 40, 40, 61,
	62, 90, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 55, 92, 56,
	64, 88, 0, 0, 51, 0, 72, 81, 73, 0,
	0, 70, 78, 68, 79, 69, 80, 0, 46, 99,
	71, 47, 43, 0, 0, 43, 43, 0, 43, 42,
	42, 42, 42, 77, 85, 87, 86, 76, 40, 0,
	0, 74, 40, 40, 40, 40, 40, 40, 40, 8,

	40, 40, 40, 40, 40, 40, 17, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	75, 82, 98, 51, 0, 0, 98, 0, 0, 44,
	0, 0, 52, 0, 46, 99, 0, 47, 0, 45,
	43, 43, 43, 43, 0, 41, 42, 42, 42, 42,
	67, 66, 0, 51, 0, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 15, 40,
	40, 40, 19, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 0,
	0, 0, 0, 0, 46, 0, 47, 45, 43, 0,

	0, 41, 0, 41, 41, 42, 0, 0, 1, 37,
	40, 3, 4, 40, 40, 40, 40, 40, 11, 12,
	40, 40, 16, 40, 40, 20, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 34, 40,
	40, 0, 0, 0, 0, 0, 0, 41, 41, 0,
	48, 41, 41, 0, 0, 2, 40, 5, 40, 40,
	40, 40, 14, 40, 40, 0, 40, 40, 40, 25,
	40, 40, 40, 40, 40, 40, 32, 40, 40, 36,
	0, 49, 0, 50, 48, 41, 0, 0, 40, 40,
	40, 9, 13, 40, 18, 0, 0, 40, 40, 24,

	26, 27, 28, 29, 30, 40, 40, 40, 49, 50,
	38, 40, 7, 40, 0, 0, 40, 40, 31, 40,
	40, 6, 40, 0, 0, 22, 23, 33, 35, 39,
	0, 21, 0, 10, 0
};

static const YY_CHAR yy_ec[256] =
{
	0,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 5, 6, 1, 1, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 19,
	19, 19, 19, 19, 19, 20, 21, 22, 23, 24,
	25, 26, 27, 1, 28, 28, 28, 28, 29, 30,
	31, 31, 31, 31, 31, 32, 31, 31, 31, 33,
	31, 31, 31, 31, 34, 31, 31, 35, 31, 31,
	36, 37, 38, 39, 31, 1, 40, 41, 42, 43,

	44, 45, 46, 47, 48, 31, 49, 50, 51, 52,
	53, 54, 31, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,

	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1
};

static const YY_CHAR yy_meta[68] =
{
	0,
	1, 1, 2, 1, 1, 3, 1, 1, 4, 1,
	1, 1, 1, 1, 1, 5, 1, 6, 6, 7,
	7, 1, 1, 1, 1, 1, 3, 7, 7, 7,
	8, 8, 8, 8, 8, 1, 3, 1, 1, 6,
	6, 7, 7, 7, 6, 8, 8, 8, 8, 8,
	8, 9, 8, 8, 9, 8, 9, 8, 9, 8,
	9, 8, 8, 1, 1, 1, 1
};

static const flex_int16_t yy_base[348] =
{
	0,
	0, 0, 690, 691, 691, 691, 664, 65, 663, 61,
	650, 691, 691, 661, 57, 691, 58, 56, 62, 87,
	133, 691, 691, 56, 660, 63, 691, 0, 84, 691,
	691, 659, 625, 39, 38, 51, 48, 46, 629, 66,
	628, 636, 66, 617, 118, 625, 630, 691, 76, 691,
	691, 691, 109, 670, 126, 186, 691, 691, 691, 88,
	115, 691, 691, 691, 691, 691, 691, 659, 167, 0,
	691, 189, 75, 230, 153, 123, 111, 658, 106, 0,
	148, 143, 144, 648, 691, 691, 691, 647, 0, 153,
	634, 691, 613, 616, 624, 611, 626, 149, 620, 606,

	607, 604, 604, 607, 604, 601, 0, 617, 85, 604,
	168, 602, 152, 180, 606, 599, 646, 91, 180, 603,
	691, 691, 691, 250, 644, 183, 223, 252, 303, 691,
	248, 0, 691, 260, 691, 0, 273, 691, 243, 280,
	86, 691, 617, 598, 0, 302, 182, 691, 615, 596,
	691, 691, 231, 335, 258, 589, 591, 599, 581, 558,
	556, 239, 569, 566, 542, 533, 528, 531, 0, 517,
	523, 519, 0, 520, 517, 501, 499, 499, 500, 507,
	493, 488, 488, 492, 482, 486, 490, 492, 480, 347,
	391, 340, 428, 284, 353, 295, 395, 691, 691, 211,

	236, 323, 386, 279, 320, 691, 345, 0, 0, 0,
	480, 0, 0, 478, 470, 475, 464, 471, 0, 0,
	465, 461, 0, 469, 464, 510, 456, 455, 454, 451,
	463, 452, 455, 456, 445, 443, 426, 431, 0, 418,
	423, 385, 0, 331, 0, 461, 470, 249, 691, 423,
	474, 434, 414, 478, 519, 0, 419, 0, 403, 404,
	395, 386, 0, 378, 385, 277, 369, 376, 371, 0,
	375, 372, 366, 345, 353, 352, 0, 343, 344, 0,
	432, 481, 441, 523, 691, 691, 291, 0, 329, 331,
	330, 0, 0, 346, 0, 327, 326, 332, 333, 0,

	0, 0, 0, 0, 0, 317, 317, 292, 691, 691,
	0, 282, 0, 262, 248, 235, 217, 185, 0, 193,
	188, 0, 160, 138, 123, 0, 0, 0, 0, 0,
	113, 691, 106, 691, 691, 573, 582, 586, 595, 602,
	611, 616, 623, 627, 629, 634, 638
};

static const flex_int16_t yy_def[348] =
{
	0,
	335, 1, 335, 335, 335, 335, 335, 336, 335, 335,
	337, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 338, 338, 335,
	335, 335, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 335, 335, 335,
	335, 335, 336, 339, 335, 339, 335, 335, 335, 337,
	340, 335, 335, 335, 335, 335, 335, 335, 335, 341,
	335, 335, 20, 335, 335, 335, 335, 342, 335, 21,
	335, 335, 335, 335, 335, 335, 335, 335, 338, 343,
	337, 335, 338, 338, 338, 338, 338, 338, 338, 338,

	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	335, 335, 335, 335, 335, 335, 343, 336, 339, 335,
	337, 344, 335, 335, 335, 341, 335, 335, 335, 335,
	335, 335, 335, 335, 345, 342, 335, 335, 335, 335,
	335, 335, 343, 335, 346, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 336,
	336, 337, 337, 335, 335, 335, 335, 335, 335, 345,

	345, 335, 335, 335, 335, 335, 343, 347, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 336, 191, 337, 193, 335, 335, 335, 335, 335,
	335, 335, 335, 343, 343, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 335, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	335, 335, 335, 335, 335, 335, 343, 255, 338, 338,
	338, 338, 338, 338, 338, 335, 335, 338, 338, 338,

	338, 338, 338, 338, 338, 338, 338, 338, 335, 335,
	338, 338, 338, 338, 335, 335, 338, 338, 338, 338,
	338, 338, 338, 335, 335, 338, 338, 338, 338, 338,
	335, 335, 335, 335, 0, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335
};

static const flex_int16_t yy_nxt[759] =
{
	0,
	4, 5, 6, 5, 7, 8, 9, 10, 11, 12,
	13, 14, 15, 16, 17, 18, 19, 20, 21, 21,
	21, 22, 23, 24, 25, 26, 27, 28, 28, 28,
	28, 29, 28, 29, 28, 30, 4, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 28, 40, 28, 41,
	28, 28, 28, 28, 42, 43, 44, 45, 46, 47,
	28, 28, 28, 48, 49, 50, 51, 54, 58, 63,
	55, 68, 65, 69, 69, 69, 69, 96, 70, 84,
	85, 64, 66, 67, 97, 59, 71, 87, 88, 90,
	98, 94, 91, 95, 99, 104, 130, 101, 105, 102,

	121, 56, 72, 100, 73, 73, 74, 74, 103, 335,
	107, 54, 112, 113, 55, 75, 108, 109, 76, 142,
	77, 78, 114, 90, 61, 115, 91, 124, 124, 124,
	75, 90, 131, 131, 172, 335, 79, 117, 185, 142,
	122, 173, 143, 142, 77, 56, 186, 78, 72, 334,
	80, 80, 80, 80, 141, 141, 142, 125, 154, 125,
	144, 75, 333, 142, 81, 139, 82, 139, 332, 118,
	140, 140, 140, 140, 149, 132, 75, 148, 331, 147,
	142, 148, 83, 126, 69, 69, 69, 69, 90, 155,
	82, 127, 150, 147, 53, 134, 135, 179, 135, 161,

	162, 148, 125, 128, 128, 148, 69, 69, 69, 69,
	134, 135, 53, 175, 180, 148, 135, 137, 138, 181,
	138, 330, 53, 176, 177, 53, 53, 187, 154, 188,
	53, 329, 137, 138, 182, 328, 154, 53, 138, 148,
	53, 327, 53, 246, 53, 72, 129, 74, 74, 74,
	74, 124, 124, 124, 54, 90, 130, 55, 75, 155,
	140, 140, 140, 140, 246, 192, 192, 155, 247, 190,
	190, 326, 194, 75, 194, 207, 207, 195, 195, 195,
	195, 125, 249, 125, 61, 196, 325, 196, 56, 247,
	197, 197, 197, 197, 215, 216, 154, 140, 140, 140,

	140, 195, 195, 195, 195, 324, 249, 126, 123, 198,
	252, 198, 197, 197, 197, 197, 323, 201, 208, 296,
	191, 191, 191, 191, 198, 322, 297, 155, 253, 198,
	191, 191, 191, 202, 203, 204, 124, 124, 124, 130,
	90, 321, 191, 191, 191, 191, 191, 191, 130, 54,
	154, 205, 55, 249, 248, 203, 249, 244, 244, 204,
	320, 319, 254, 254, 242, 242, 125, 61, 125, 248,
	195, 195, 195, 195, 318, 317, 61, 249, 316, 315,
	249, 155, 135, 56, 135, 314, 313, 54, 312, 311,
	55, 308, 126, 54, 307, 306, 55, 135, 250, 305,

	250, 304, 135, 251, 251, 251, 251, 303, 243, 243,
	243, 243, 197, 197, 197, 197, 302, 301, 243, 243,
	243, 56, 300, 299, 138, 298, 138, 56, 295, 294,
	243, 243, 243, 243, 243, 243, 130, 293, 292, 138,
	251, 251, 251, 251, 138, 245, 245, 245, 245, 282,
	282, 282, 282, 291, 290, 245, 245, 245, 284, 284,
	284, 284, 289, 286, 61, 286, 280, 245, 245, 245,
	245, 245, 245, 281, 279, 281, 278, 277, 282, 282,
	282, 282, 283, 154, 283, 276, 275, 284, 284, 284,
	284, 251, 251, 251, 251, 287, 287, 274, 282, 282,

	282, 282, 273, 285, 272, 285, 271, 270, 269, 268,
	309, 267, 309, 266, 155, 265, 264, 263, 285, 262,
	261, 260, 259, 285, 154, 309, 258, 257, 256, 241,
	309, 240, 239, 238, 237, 236, 288, 288, 288, 288,
	284, 284, 284, 284, 235, 234, 288, 288, 288, 233,
	232, 231, 310, 230, 310, 155, 229, 228, 288, 288,
	288, 288, 288, 288, 227, 226, 225, 310, 224, 223,
	222, 221, 310, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 60, 220, 60, 219, 60, 60, 60, 60,
	60, 89, 89, 89, 89, 54, 54, 54, 54, 54,

	54, 54, 54, 54, 60, 60, 218, 60, 217, 214,
	60, 136, 213, 136, 136, 136, 136, 136, 136, 136,
	146, 146, 146, 153, 212, 153, 153, 153, 153, 153,
	153, 153, 193, 193, 200, 200, 153, 153, 211, 153,
	210, 209, 153, 255, 255, 206, 206, 199, 199, 90,
	189, 90, 184, 183, 178, 174, 171, 170, 169, 168,
	167, 166, 165, 164, 163, 160, 159, 158, 157, 156,
	61, 152, 151, 145, 133, 123, 120, 119, 116, 111,
	110, 106, 93, 92, 86, 62, 61, 57, 52, 335,
	3, 335, 335, 335, 335, 335, 335, 335, 335, 335,

	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335
};

static const flex_int16_t yy_chk[759] =
{
	0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 8, 10, 15,
	8, 18, 17, 18, 18, 18, 18, 35, 19, 24,
	24, 15, 17, 17, 35, 10, 19, 26, 26, 29,
	35, 34, 29, 34, 36, 38, 60, 37, 38, 37,

	49, 8, 20, 36, 20, 20, 20, 20, 37, 73,
	40, 53, 43, 43, 53, 20, 40, 40, 20, 141,
	20, 20, 43, 45, 60, 43, 45, 55, 55, 55,
	20, 55, 61, 61, 109, 73, 20, 45, 118, 79,
	49, 109, 77, 141, 20, 53, 118, 20, 21, 333,
	21, 21, 21, 21, 76, 79, 76, 55, 90, 55,
	77, 21, 331, 79, 21, 75, 21, 75, 325, 45,
	75, 75, 75, 75, 82, 61, 21, 83, 324, 81,
	76, 81, 21, 55, 69, 69, 69, 69, 126, 90,
	21, 56, 82, 83, 56, 69, 69, 113, 69, 98,

	98, 83, 126, 56, 56, 81, 72, 72, 72, 72,
	69, 69, 56, 111, 113, 147, 69, 72, 72, 114,
	72, 323, 56, 111, 111, 56, 56, 119, 127, 119,
	56, 321, 72, 72, 114, 320, 153, 56, 72, 147,
	56, 318, 56, 200, 56, 74, 56, 74, 74, 74,
	74, 124, 124, 124, 128, 124, 131, 128, 74, 127,
	139, 139, 139, 139, 200, 131, 131, 153, 201, 128,
	128, 317, 134, 74, 134, 155, 155, 134, 134, 134,
	134, 124, 248, 124, 131, 137, 316, 137, 128, 201,
	137, 137, 137, 137, 162, 162, 287, 140, 140, 140,

	140, 194, 194, 194, 194, 315, 248, 124, 129, 140,
	204, 140, 196, 196, 196, 196, 314, 146, 155, 266,
	129, 129, 129, 129, 140, 312, 266, 287, 204, 140,
	129, 129, 129, 146, 146, 146, 154, 154, 154, 244,
	154, 308, 129, 129, 129, 129, 129, 129, 192, 190,
	207, 146, 190, 205, 202, 146, 202, 192, 192, 146,
	307, 306, 207, 207, 190, 190, 154, 244, 154, 205,
	195, 195, 195, 195, 299, 298, 192, 205, 297, 296,
	202, 207, 195, 190, 195, 294, 291, 242, 290, 289,
	242, 279, 154, 191, 278, 276, 191, 195, 203, 275,

	203, 274, 195, 203, 203, 203, 203, 273, 191, 191,
	191, 191, 197, 197, 197, 197, 272, 271, 191, 191,
	191, 242, 269, 268, 197, 267, 197, 191, 265, 264,
	191, 191, 191, 191, 191, 191, 193, 262, 261, 197,
	250, 250, 250, 250, 197, 193, 193, 193, 193, 281,
	281, 281, 281, 260, 259, 193, 193, 193, 283, 283,
	283, 283, 257, 253, 193, 252, 241, 193, 193, 193,
	193, 193, 193, 246, 240, 246, 238, 237, 246, 246,
	246, 246, 247, 254, 247, 236, 235, 247, 247, 247,
	247, 251, 251, 251, 251, 254, 254, 234, 282, 282,

	282, 282, 233, 251, 232, 251, 231, 230, 229, 228,
	282, 227, 282, 226, 254, 225, 224, 222, 251, 221,
	218, 217, 216, 251, 255, 282, 215, 214, 211, 189,
	282, 188, 187, 186, 185, 184, 255, 255, 255, 255,
	284, 284, 284, 284, 183, 182, 255, 255, 255, 181,
	180, 179, 284, 178, 284, 255, 177, 176, 255, 255,
	255, 255, 255, 255, 175, 174, 172, 284, 171, 170,
	168, 167, 284, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 337, 166, 337, 165, 337, 337, 337, 337,
	337, 338, 338, 338, 338, 339, 339, 339, 339, 339,

	339, 339, 339, 339, 340, 340, 164, 340, 163, 161,
	340, 341, 160, 341, 341, 341, 341, 341, 341, 341,
	342, 342, 342, 343, 159, 343, 343, 343, 343, 343,
	343, 343, 344, 344, 345, 345, 346, 346, 158, 346,
	157, 156, 346, 347, 347, 150, 149, 144, 143, 125,
	120, 117, 116, 115, 112, 110, 108, 106, 105, 104,
	103, 102, 101, 100, 99, 97, 96, 95, 94, 93,
	91, 88, 84, 78, 68, 54, 47, 46, 44, 42,
	41, 39, 33, 32, 25, 14, 11, 9, 7, 3,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,

	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335
};

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "scanner.l"
#line 25 "scanner.l"
#include <iostream>
#include <cstdlib>
#include <stdlib.h>
#define YY_NO_UNISTD_H
#include "scanner.h"
#include "interpreter.h"
#include "parser.hpp"
#include "location.hh"

using namespace std;

// Original yyterminate() macro returns int. Since we're using Bison 3 variants
// as tokens, we must redefine it to change type from `int` to `Parser::semantic_type`
#define yyterminate() WadeSpace::Parser::make_END(WadeSpace::location());

// This will track current scanner location.
// Action is called when length of the token is known.
#define YY_USER_ACTION m_driver.increaseLocation(yyleng);

// !!!WARNING!!!
// Location API is used, but the location is not initialized, 'cause I'm lazy. When making
// a token with make_{something} method you can pass detailed token location. Current location
// is accessible with m_driver.location() method. All puzzle elements are there - just
// pass location value in every action code block below. I'm going to waste more time writing
// this excuse than putting this boilerplate below...
//
// Location class can be found in location.hh and posistion.hh files. It's just a bit too much
// boilerplate for this small example. Bummer.
#line 730 "scanner.cpp"
#line 731 "scanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;

	if (!(yy_init))
	{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if (!(yy_start))
			(yy_start) = 1; /* first start state */

		if (!yyin)
			yyin.rdbuf(std::cin.rdbuf());

		if (!yyout)
			yyout.rdbuf(std::cout.rdbuf());

		if (!YY_CURRENT_BUFFER)
		{
			yyensure_buffer_stack();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin, YY_BUF_SIZE);
		}

		yy_load_buffer_state();
	}

	{
#line 61 "scanner.l"


#line 866 "scanner.cpp"

		while (/*CONSTCOND*/1) /* loops until end-of-file is reached */
		{
			yy_cp = (yy_c_buf_p);

			/* Support of yytext. */
			*yy_cp = (yy_hold_char);

			/* yy_bp points to the position in yy_ch_buf of the start of
			 * the current run.
			 */
			yy_bp = yy_cp;

			yy_current_state = (yy_start);
		yy_match:
			do
			{
				YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
				if (yy_accept[yy_current_state])
				{
					(yy_last_accepting_state) = yy_current_state;
					(yy_last_accepting_cpos) = yy_cp;
				}
				while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
				{
					yy_current_state = (int)yy_def[yy_current_state];
					if (yy_current_state >= 336)
						yy_c = yy_meta[yy_c];
				}
				yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
				++yy_cp;
			}
			while (yy_base[yy_current_state] != 691);

		yy_find_action:
			yy_act = yy_accept[yy_current_state];
			if (yy_act == 0)
			{
				/* have to back up */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				yy_act = yy_accept[yy_current_state];
			}

			YY_DO_BEFORE_ACTION;

		do_action: /* This label is used only to access EOF actions. */

			switch (yy_act)
			{
			/* beginning of action switch */
			case 0: /* must back up */
				/* undo the effects of YY_DO_BEFORE_ACTION */
				*yy_cp = (yy_hold_char);
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;

			case 1:
				YY_RULE_SETUP
#line 63 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_AUTO(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 2:
				YY_RULE_SETUP
#line 67 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_BREAK(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 3:
				YY_RULE_SETUP
#line 71 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_CASE(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 4:
				YY_RULE_SETUP
#line 75 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_CHAR(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 5:
				YY_RULE_SETUP
#line 79 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_CONST(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 6:
				YY_RULE_SETUP
#line 83 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_CONTINUE(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 7:
				YY_RULE_SETUP
#line 87 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_DEFAULT(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 8:
				YY_RULE_SETUP
#line 91 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_DO(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 9:
				YY_RULE_SETUP
#line 95 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_DOUBLE(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 10:
				YY_RULE_SETUP
#line 99 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_LONG_DOUBLE(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 11:
				YY_RULE_SETUP
#line 103 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_ELSE(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 12:
				YY_RULE_SETUP
#line 107 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_ENUM(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 13:
				YY_RULE_SETUP
#line 111 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_EXTERN(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 14:
				YY_RULE_SETUP
#line 115 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_FLOAT(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 15:
				YY_RULE_SETUP
#line 119 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_FOR(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 16:
				YY_RULE_SETUP
#line 123 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_GOTO(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 17:
				YY_RULE_SETUP
#line 127 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_IF(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 18:
				YY_RULE_SETUP
#line 131 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_INLINE(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 19:
				YY_RULE_SETUP
#line 135 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_INT(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 20:
				YY_RULE_SETUP
#line 139 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_LONG(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 21:
				YY_RULE_SETUP
#line 143 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_LONG_LONG(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 22:
				YY_RULE_SETUP
#line 147 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_REGISTER(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 23:
				YY_RULE_SETUP
#line 151 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_RESTRICT(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 24:
				YY_RULE_SETUP
#line 155 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_RETURN(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 25:
				YY_RULE_SETUP
#line 159 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_SHORT(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 26:
				YY_RULE_SETUP
#line 163 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_SIGNED(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 27:
				YY_RULE_SETUP
#line 167 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_SIZEOF(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 28:
				YY_RULE_SETUP
#line 171 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_STATIC(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 29:
				YY_RULE_SETUP
#line 175 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_STRUCT(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 30:
				YY_RULE_SETUP
#line 179 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_SWITCH(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 31:
				YY_RULE_SETUP
#line 183 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_TYPEDEF(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 32:
				YY_RULE_SETUP
#line 187 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_UNION(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 33:
				YY_RULE_SETUP
#line 191 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_UNSIGNED(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 34:
				YY_RULE_SETUP
#line 195 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_VOID(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 35:
				YY_RULE_SETUP
#line 199 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_VOLATILE(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 36:
				YY_RULE_SETUP
#line 203 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_WHILE(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 37:
				YY_RULE_SETUP
#line 207 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_BOOL(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 38:
				YY_RULE_SETUP
#line 211 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_COMPLEX(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 39:
				YY_RULE_SETUP
#line 215 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_IMAGINARY(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 40:
				YY_RULE_SETUP
#line 220 "scanner.l"
				{
					cout << "Scanner: identifier [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_IDENTIFIER(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 41:
				YY_RULE_SETUP
#line 224 "scanner.l"
				{
					cout << "Scanner: decimal number: " << yytext << endl;
					uint64_t number = strtoull(yytext, 0, 10);
					return WadeSpace::Parser::make_I_CONST(number, WadeSpace::location());
				}
				YY_BREAK
			case 42:
				YY_RULE_SETUP
#line 229 "scanner.l"
				{
					cout << "Scanner: decimal number: " << yytext << endl;
					uint64_t number = strtoull(yytext, 0, 10);
					return WadeSpace::Parser::make_I_CONST(number, WadeSpace::location());
				}
				YY_BREAK
			case 43:
				YY_RULE_SETUP
#line 234 "scanner.l"
				{
					cout << "Scanner: decimal number: " << yytext << endl;
					uint64_t number = strtoull(yytext, 0, 10);
					return WadeSpace::Parser::make_I_CONST(number, WadeSpace::location());
				}
				YY_BREAK
			case 44:
				YY_RULE_SETUP
#line 239 "scanner.l"
				{
					cout << "Scanner: decimal number: " << yytext << endl;
					uint64_t number = strtoull(yytext, 0, 10);
					return WadeSpace::Parser::make_I_CONST(number, WadeSpace::location());
				}
				YY_BREAK
			case 45:
				YY_RULE_SETUP
#line 244 "scanner.l"
				{
					cout << "Scanner: decimal number: " << yytext << endl;
					long double number = strtold(yytext, NULL);
					return WadeSpace::Parser::make_F_CONST(number, WadeSpace::location());
				}
				YY_BREAK
			case 46:
				YY_RULE_SETUP
#line 249 "scanner.l"
				{
					cout << "Scanner: decimal number: " << yytext << endl;
					long double number = strtold(yytext, NULL);
					return WadeSpace::Parser::make_F_CONST(number, WadeSpace::location());
				}
				YY_BREAK
			case 47:
				YY_RULE_SETUP
#line 254 "scanner.l"
				{
					cout << "Scanner: decimal number: " << yytext << endl;
					long double number = strtold(yytext, NULL);
					return WadeSpace::Parser::make_F_CONST(number, WadeSpace::location());
				}
				YY_BREAK
			case 48:
				YY_RULE_SETUP
#line 259 "scanner.l"
				{
					cout << "Scanner: decimal number: " << yytext << endl;
					long double number = strtold(yytext, NULL);
					return WadeSpace::Parser::make_F_CONST(number, WadeSpace::location());
				}
				YY_BREAK
			case 49:
				YY_RULE_SETUP
#line 264 "scanner.l"
				{
					cout << "Scanner: decimal number: " << yytext << endl;
					long double number = strtold(yytext, NULL);
					return WadeSpace::Parser::make_F_CONST(number, WadeSpace::location());
				}
				YY_BREAK
			case 50:
				YY_RULE_SETUP
#line 269 "scanner.l"
				{
					cout << "Scanner: decimal number: " << yytext << endl;
					long double number = strtold(yytext, NULL);
					return WadeSpace::Parser::make_F_CONST(number, WadeSpace::location());
				}
				YY_BREAK
			case 51:
				/* rule 51 can match eol */
				YY_RULE_SETUP
#line 275 "scanner.l"
				{
					cout << "Scanner: string literal [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_STRING_LITERAL(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 52:
				YY_RULE_SETUP
#line 280 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_ELLIPSIS(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 53:
				YY_RULE_SETUP
#line 284 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_QUESTION(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 54:
				YY_RULE_SETUP
#line 288 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_SEMICOLON(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 55:
				YY_RULE_SETUP
#line 292 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_OCURLY(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 56:
				YY_RULE_SETUP
#line 296 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_CCURLY(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 57:
				YY_RULE_SETUP
#line 300 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_COMMA(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 58:
				YY_RULE_SETUP
#line 304 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_COLON(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 59:
				YY_RULE_SETUP
#line 308 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_OPAREN(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 60:
				YY_RULE_SETUP
#line 312 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_CPAREN(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 61:
				YY_RULE_SETUP
#line 316 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_OBRACE(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 62:
				YY_RULE_SETUP
#line 320 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_CBRACE(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 63:
				YY_RULE_SETUP
#line 324 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_PERIOD(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 64:
				YY_RULE_SETUP
#line 328 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_TILDE(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 65:
				YY_RULE_SETUP
#line 332 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_EQUAL(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 66:
				YY_RULE_SETUP
#line 336 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_RIGHT_ASSIGN(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 67:
				YY_RULE_SETUP
#line 340 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_LEFT_ASSIGN(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 68:
				YY_RULE_SETUP
#line 344 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_ADD_ASSIGN(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 69:
				YY_RULE_SETUP
#line 348 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_SUB_ASSIGN(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 70:
				YY_RULE_SETUP
#line 352 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_MUL_ASSIGN(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 71:
				YY_RULE_SETUP
#line 356 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_DIV_ASSIGN(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 72:
				YY_RULE_SETUP
#line 360 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_MOD_ASSIGN(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 73:
				YY_RULE_SETUP
#line 364 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_AND_ASSIGN(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 74:
				YY_RULE_SETUP
#line 368 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_XOR_ASSIGN(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 75:
				YY_RULE_SETUP
#line 372 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_OR_ASSIGN(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 76:
				YY_RULE_SETUP
#line 376 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_RIGHT_OP(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 77:
				YY_RULE_SETUP
#line 380 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_LEFT_OP(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 78:
				YY_RULE_SETUP
#line 384 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_INC_OP(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 79:
				YY_RULE_SETUP
#line 388 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_DEC_OP(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 80:
				YY_RULE_SETUP
#line 392 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_PTR_OP(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 81:
				YY_RULE_SETUP
#line 396 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_AND_OP(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 82:
				YY_RULE_SETUP
#line 400 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_OR_OP(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 83:
				YY_RULE_SETUP
#line 404 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_LESS(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 84:
				YY_RULE_SETUP
#line 408 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_GREATER(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 85:
				YY_RULE_SETUP
#line 412 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_LESS_EQUAL(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 86:
				YY_RULE_SETUP
#line 416 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_GREATER_EQUAL(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 87:
				YY_RULE_SETUP
#line 420 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_EQUAL_EQUAL(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 88:
				YY_RULE_SETUP
#line 424 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_NOT_EQUAL(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 89:
				YY_RULE_SETUP
#line 428 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_NOT_OP(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 90:
				YY_RULE_SETUP
#line 432 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_XOR_OP(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 91:
				YY_RULE_SETUP
#line 436 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_BIT_AND(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 92:
				YY_RULE_SETUP
#line 440 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_BIT_OR(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 93:
				YY_RULE_SETUP
#line 444 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_MINUS_OP(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 94:
				YY_RULE_SETUP
#line 448 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_PLUS_OP(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 95:
				YY_RULE_SETUP
#line 452 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_TIMES_OP(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 96:
				YY_RULE_SETUP
#line 456 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_DIV_OP(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 97:
				YY_RULE_SETUP
#line 460 "scanner.l"
				{
					cout << "Scanner: token [" << yytext << "]" << endl;
					return WadeSpace::Parser::make_MOD_OP(yytext, WadeSpace::location());
				}
				YY_BREAK
			case 98:
				/* rule 98 can match eol */
				YY_RULE_SETUP
#line 464 "scanner.l"
				{
					cout << "Scanner: multiline comment [" << yytext << "]" << endl;
				}
				YY_BREAK
			case 99:
				YY_RULE_SETUP
#line 465 "scanner.l"
				{
					cout << "Scanner: single line comment [" << yytext << "]" << endl;
				}
				YY_BREAK
			case 100:
				/* rule 100 can match eol */
				YY_RULE_SETUP
#line 466 "scanner.l"
				{
				}
				YY_BREAK
			case 101:
				YY_RULE_SETUP
#line 467 "scanner.l"
				{
					cout << "Scanner: unknown character [" << yytext << "]" << endl;
				}
				YY_BREAK
			case YY_STATE_EOF(INITIAL):
#line 470 "scanner.l"
				{
					return yyterminate();
				}
				YY_BREAK
			case 102:
				YY_RULE_SETUP
#line 472 "scanner.l"
				YY_FATAL_ERROR("flex scanner jammed");
				YY_BREAK
#line 1743 "scanner.cpp"

			case YY_END_OF_BUFFER:
				{
					/* Amount of text matched not including the EOB char. */
					int yy_amount_of_matched_text = (int)(yy_cp - (yytext_ptr)) - 1;

					/* Undo the effects of YY_DO_BEFORE_ACTION. */
					*yy_cp = (yy_hold_char);
					YY_RESTORE_YY_MORE_OFFSET

					if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW)
					{
						/* We're scanning a new file or input source.  It's
						 * possible that this happened because the user
						 * just pointed yyin at a new source and called
						 * yylex().  If so, then we have to assure
						 * consistency between YY_CURRENT_BUFFER and our
						 * globals.  Here is the right place to do so, because
						 * this is the first action (other than possibly a
						 * back-up) that will match for the new input source.
						 */
						(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
						YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
						YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
					}

					/* Note that here we test for yy_c_buf_p "<=" to the position
					 * of the first EOB in the buffer, since yy_c_buf_p will
					 * already have been incremented past the NUL character
					 * (since all states make transitions on EOB to the
					 * end-of-buffer state).  Contrast this with the test
					 * in input().
					 */
					if ((yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)])
					{
						/* This was really a NUL. */
						yy_state_type yy_next_state;

						(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

						yy_current_state = yy_get_previous_state();

						/* Okay, we're now positioned to make the NUL
						 * transition.  We couldn't have
						 * yy_get_previous_state() go ahead and do it
						 * for us because it doesn't know how to deal
						 * with the possibility of jamming (and we don't
						 * want to build jamming into it because then it
						 * will run more slowly).
						 */

						yy_next_state = yy_try_NUL_trans(yy_current_state);

						yy_bp = (yytext_ptr) + YY_MORE_ADJ;

						if (yy_next_state)
						{
							/* Consume the NUL. */
							yy_cp = ++(yy_c_buf_p);
							yy_current_state = yy_next_state;
							goto yy_match;
						}

						else
						{
							yy_cp = (yy_c_buf_p);
							goto yy_find_action;
						}
					}

					else
						switch (yy_get_next_buffer())
						{
						case EOB_ACT_END_OF_FILE:
							{
								(yy_did_buffer_switch_on_eof) = 0;

								if (yywrap())
								{
									/* Note: because we've taken care in
									 * yy_get_next_buffer() to have set up
									 * yytext, we can now set up
									 * yy_c_buf_p so that if some total
									 * hoser (like flex itself) wants to
									 * call the scanner after we return the
									 * YY_NULL, it'll still work - another
									 * YY_NULL will get returned.
									 */
									(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

									yy_act = YY_STATE_EOF(YY_START);
									goto do_action;
								}

								else
								{
									if (!(yy_did_buffer_switch_on_eof))
										YY_NEW_FILE;
								}
								break;
							}

						case EOB_ACT_CONTINUE_SCAN:
							(yy_c_buf_p) =
								(yytext_ptr) + yy_amount_of_matched_text;

							yy_current_state = yy_get_previous_state();

							yy_cp = (yy_c_buf_p);
							yy_bp = (yytext_ptr) + YY_MORE_ADJ;
							goto yy_match;

						case EOB_ACT_LAST_MATCH:
							(yy_c_buf_p) =
								&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

							yy_current_state = yy_get_previous_state();

							yy_cp = (yy_c_buf_p);
							yy_bp = (yytext_ptr) + YY_MORE_ADJ;
							goto yy_find_action;
						}
					break;
				}

			default:
				YY_FATAL_ERROR(
					"fatal flex scanner internal error--no action found");
			} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer(std::istream* arg_yyin, std::ostream* arg_yyout):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer(std::istream& arg_yyin, std::ostream& arg_yyout):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1; // this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack);
	yy_delete_buffer(YY_CURRENT_BUFFER);
	yyfree(yy_buffer_stack);
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams(std::istream& new_in, std::ostream& new_out)
{
	// was if( new_in )
	yy_delete_buffer(YY_CURRENT_BUFFER);
	yy_switch_to_buffer(yy_create_buffer(new_in, YY_BUF_SIZE));

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams(std::istream* new_in, std::ostream* new_out)
{
	if (!new_in)
	{
		new_in = &yyin;
	}

	if (!new_out)
	{
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput(char* buf, int /* max_size */)
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if (yyin.eof() || yyin.fail())
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get(buf[0]);

	if (yyin.eof())
		return 0;

	if (yyin.bad())
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput(const char* buf, int size)
{
	(void)yyout.write(buf, size);
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
	char* dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char* source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ((yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1])
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed");

	if (YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0)
	{
		/* Don't try to fill the buffer, so this is an EOF. */
		if ((yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1)
		{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
		}

		else
		{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
		}
	}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int)((yy_c_buf_p) - (yytext_ptr) - 1);

	for (i = 0; i < number_to_move; ++i)
		*(dest++) = *(source++);

	if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING)
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
	{
		int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while (num_to_read <= 0)
		{
			/* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int)((yy_c_buf_p) - b->yy_ch_buf);

			if (b->yy_is_our_buffer)
			{
				int new_size = b->yy_buf_size * 2;

				if (new_size <= 0)
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char*)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void*)b->yy_ch_buf,
					          (yy_size_t)(b->yy_buf_size + 2));
			}
			else
			/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if (!b->yy_ch_buf)
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow");

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
				number_to_move - 1;
		}

		if (num_to_read > YY_READ_BUF_SIZE)
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT((&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
		         (yy_n_chars), num_to_read);

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
	}

	if ((yy_n_chars) == 0)
	{
		if (number_to_move == YY_MORE_ADJ)
		{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin);
		}

		else
		{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
		}
	}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size)
	{
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char*)yyrealloc(
			(void*)YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t)new_size);
		if (!YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
			YY_FATAL_ERROR("out of dynamic memory in yy_get_next_buffer()");
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int)(new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char* yy_cp;

	yy_current_state = (yy_start);

	for (yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp)
	{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if (yy_accept[yy_current_state])
		{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
		}
		while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
		{
			yy_current_state = (int)yy_def[yy_current_state];
			if (yy_current_state >= 336)
				yy_c = yy_meta[yy_c];
		}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
yy_state_type yyFlexLexer::yy_try_NUL_trans(yy_state_type yy_current_state)
{
	int yy_is_jam;
	char* yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if (yy_accept[yy_current_state])
	{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
	}
	while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
	{
		yy_current_state = (int)yy_def[yy_current_state];
		if (yy_current_state >= 336)
			yy_c = yy_meta[yy_c];
	}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 335);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
void yyFlexLexer::yyunput(int c, char* yy_bp)
{
	char* yy_cp;

	yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if (yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2)
	{
		/* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char* dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char* source =
			&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while (source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
			*--dest = *--source;

		yy_cp += (int)(dest - source);
		yy_bp += (int)(dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int)YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if (yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2)
			YY_FATAL_ERROR("flex scanner push-back overflow");
	}

	*--yy_cp = (char)c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

int yyFlexLexer::yyinput()
{
	int c;

	*(yy_c_buf_p) = (yy_hold_char);

	if (*(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR)
	{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ((yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)])
		/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
		{
			/* need more input */
			int offset = (int)((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch (yy_get_next_buffer())
			{
			case EOB_ACT_LAST_MATCH:
				/* This happens because yy_g_n_b()
				 * sees that we've accumulated a
				 * token and flags that we need to
				 * try matching the token before
				 * proceeding.  But for input(),
				 * there's no matching to consider.
				 * So convert the EOB_ACT_LAST_MATCH
				 * to EOB_ACT_END_OF_FILE.
				 */

				/* Reset buffer status. */
				yyrestart(yyin);

			/*FALLTHROUGH*/

			case EOB_ACT_END_OF_FILE:
				{
					if (yywrap())
						return 0;

					if (!(yy_did_buffer_switch_on_eof))
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) = (yytext_ptr) + offset;
				break;
			}
		}
	}

	c = *(unsigned char*)(yy_c_buf_p); /* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0'; /* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart(std::istream& input_file)
{
	if (!YY_CURRENT_BUFFER)
	{
		yyensure_buffer_stack();
		YY_CURRENT_BUFFER_LVALUE =
			yy_create_buffer(yyin, YY_BUF_SIZE);
	}

	yy_init_buffer(YY_CURRENT_BUFFER, input_file);
	yy_load_buffer_state();
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart(std::istream* input_file)
{
	if (!input_file)
	{
		input_file = &yyin;
	}
	yyrestart(*input_file);
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
void yyFlexLexer::yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
{
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack();
	if (YY_CURRENT_BUFFER == new_buffer)
		return;

	if (YY_CURRENT_BUFFER)
	{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
	}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

void yyFlexLexer::yy_load_buffer_state()
{
	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yyFlexLexer::yy_create_buffer(std::istream& file, int size)
{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE)yyalloc(sizeof(struct yy_buffer_state));
	if (!b)
		YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char*)yyalloc((yy_size_t)(b->yy_buf_size + 2));
	if (!b->yy_ch_buf)
		YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b, file);

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yyFlexLexer::yy_create_buffer(std::istream* file, int size)
{
	return yy_create_buffer(*file, size);
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
void yyFlexLexer::yy_delete_buffer(YY_BUFFER_STATE b)
{
	if (!b)
		return;

	if (b == YY_CURRENT_BUFFER) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE)0;

	if (b->yy_is_our_buffer)
		yyfree((void*)b->yy_ch_buf);

	yyfree((void*)b);
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
void yyFlexLexer::yy_init_buffer(YY_BUFFER_STATE b, std::istream& file)

{
	int oerrno = errno;

	yy_flush_buffer(b);

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

	/* If b is the current buffer, then yy_init_buffer was _probably_
	 * called from yyrestart() or through yy_get_next_buffer.
	 * In that case, we don't want to reset the lineno or column.
	 */
	if (b != YY_CURRENT_BUFFER)
	{
		b->yy_bs_lineno = 1;
		b->yy_bs_column = 0;
	}

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
void yyFlexLexer::yy_flush_buffer(YY_BUFFER_STATE b)
{
	if (!b)
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if (b == YY_CURRENT_BUFFER)
		yy_load_buffer_state();
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state(YY_BUFFER_STATE new_buffer)
{
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if (YY_CURRENT_BUFFER)
	{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
	}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state();
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state(void)
{
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER)
	{
		yy_load_buffer_state();
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;

	if (!(yy_buffer_stack))
	{
		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
		(num_to_alloc * sizeof(struct yy_buffer_state*)
		);
		if (!(yy_buffer_stack))
			YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1)
	{
		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
		((yy_buffer_stack),
		 num_to_alloc * sizeof(struct yy_buffer_state*)
		);
		if (!(yy_buffer_stack))
			YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

void yyFlexLexer::yy_push_state(int _new_state)
{
	if ((yy_start_stack_ptr) >= (yy_start_stack_depth))
	{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t)(yy_start_stack_depth) * sizeof(int);

		if (!(yy_start_stack))
			(yy_start_stack) = (int*)yyalloc(new_size);

		else
			(yy_start_stack) = (int*)yyrealloc(
				(void*)(yy_start_stack), new_size);

		if (!(yy_start_stack))
			YY_FATAL_ERROR("out of memory expanding start-condition stack");
	}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

void yyFlexLexer::yy_pop_state()
{
	if (--(yy_start_stack_ptr) < 0)
		YY_FATAL_ERROR("start-condition stack underflow");

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

int yyFlexLexer::yy_top_state()
{
	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError(const char* msg)
{
	std::cerr << msg << std::endl;
	exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void*yyalloc(yy_size_t size)
{
	return malloc(size);
}

void*yyrealloc(void* ptr, yy_size_t size)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree(void* ptr)
{
	free((char*)ptr); /* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 472 "scanner.l"
