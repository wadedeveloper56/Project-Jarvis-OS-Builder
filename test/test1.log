Scanner: single line comment [//char var1;]
Scanner: single line comment [//short var2;]
Scanner: single line comment [//int var3;]
Scanner: single line comment [//long var4;]
Scanner: single line comment [//long long var5;]
Scanner: single line comment [//float var6;]
Scanner: single line comment [//double var7;]
Scanner: single line comment [//long double var8;]
Scanner: single line comment [//bool var9;]
Scanner: single line comment [//complex var10;]
Scanner: single line comment [//imaginary var11;]
Scanner: single line comment [//char *var12[];]
Scanner: token [void]
VOID REDUCE to type_specifier
Scanner: identifier [function2]
type_specifier REDUCE to declaration_specifiers
IDENTIFIER REDUCE to direct_declarator
Scanner: token [(]
Scanner: token [int]
INT REDUCE to type_specifier
Scanner: identifier [var]
type_specifier REDUCE to declaration_specifiers
IDENTIFIER REDUCE to direct_declarator
Scanner: token [)]
direct_declarator REDUCE to declarator
declaration_specifiers declarator REDUCE to parameter_declaration
parameter_declaration REDUCE to parameter_list
parameter_list REDUCE to parameter_type_list
direct_declarator OPAREN parameter_type_list CPAREN to direct_declarator
Scanner: token [;]
direct_declarator REDUCE to declarator
declarator REDUCE to init_declarator
init_declarator REDUCE to init_declarator_list
declaration_specifiers init_declarator_list SEMICOLON REDUCE to declaration
declaration REDUCE to external_declaration
external_declaration REDUCE to translation_unit
Scanner: token [int]
INT REDUCE to type_specifier
Scanner: identifier [main]
type_specifier REDUCE to declaration_specifiers
IDENTIFIER REDUCE to direct_declarator
Scanner: token [(]
Scanner: token [)]
direct_declarator OPAREN CPAREN REDUCE to direct_declarator
Scanner: token [{]
direct_declarator REDUCE to declarator
Scanner: identifier [function2]
Scanner: token [(]
IDENTIFIER REDUCE to primary_expression
primary_expression REDUCE to postfix_expression
Scanner: decimal number: 7
I_CONST REDUCE to constant 7
constant REDUCE to primary_expression
primary_expression REDUCE to postfix_expression
Scanner: token [)]
postfix_expression REDUCE unary_expression
unary_expression REDUCE to cast_expression
cast_expression REDUCE to multiplicative_expression
multiplicative_expression REDUCE to additive_expression
additive_expression REDUCE to shift_expression
shift_expression REDUCE to relational_expression
relational_expression REDUCE to equality_expression
equality_expression REDUCE to and_expression
and_expression REDUCE to exclusive_or_expression
exclusive_or_expression REDUCE to inclusive_or_expression
inclusive_or_expression REDUCE to logical_and_expression
inclusive_and_expression REDUCE to logical_or_expression
logical_or_expression REDUCE to conditional_expression
conditional_expression REDUCE to assignment_expression
assignment_expression REDUCE argument_expression_list
postfix_expression OPAREN argument_expression_list CPAREN REDUCE to postfix_expression
Scanner: token [;]
postfix_expression REDUCE unary_expression
unary_expression REDUCE to cast_expression
cast_expression REDUCE to multiplicative_expression
multiplicative_expression REDUCE to additive_expression
additive_expression REDUCE to shift_expression
shift_expression REDUCE to relational_expression
relational_expression REDUCE to equality_expression
equality_expression REDUCE to and_expression
and_expression REDUCE to exclusive_or_expression
exclusive_or_expression REDUCE to inclusive_or_expression
inclusive_or_expression REDUCE to logical_and_expression
inclusive_and_expression REDUCE to logical_or_expression
logical_or_expression REDUCE to conditional_expression
conditional_expression REDUCE to assignment_expression
asignment_expression REDUCE to expression
expression SEMICOLON REDUCE to expression_statement
expression_statement REDUCE to statement
statement REDUCE to statement_list
Scanner: token [return]
Scanner: decimal number: 0
I_CONST REDUCE to constant 0
constant REDUCE to primary_expression
primary_expression REDUCE to postfix_expression
Scanner: token [;]
postfix_expression REDUCE unary_expression
unary_expression REDUCE to cast_expression
cast_expression REDUCE to multiplicative_expression
multiplicative_expression REDUCE to additive_expression
additive_expression REDUCE to shift_expression
shift_expression REDUCE to relational_expression
relational_expression REDUCE to equality_expression
equality_expression REDUCE to and_expression
and_expression REDUCE to exclusive_or_expression
exclusive_or_expression REDUCE to inclusive_or_expression
inclusive_or_expression REDUCE to logical_and_expression
inclusive_and_expression REDUCE to logical_or_expression
logical_or_expression REDUCE to conditional_expression
conditional_expression REDUCE to assignment_expression
asignment_expression REDUCE to expression
RETURN expression SEMICOLON REDUCE to jump_statement
jump_statement REDUCE to statement
statement_list statement REDUCE to statement_list
Scanner: token [}]
OCURLY statement_list CCURLY REDUCE to compound_statement
declaration_specifiers declarator compound_statement REDUCE to function_definition
function_definition REDUCE to external_declaration
translation_unit external_declaration REDUCE to translation_unit
Scanner: token [void]
VOID REDUCE to type_specifier
Scanner: identifier [function2]
type_specifier REDUCE to declaration_specifiers
IDENTIFIER REDUCE to direct_declarator
Scanner: token [(]
Scanner: token [int]
INT REDUCE to type_specifier
Scanner: identifier [var]
type_specifier REDUCE to declaration_specifiers
IDENTIFIER REDUCE to direct_declarator
Scanner: token [)]
direct_declarator REDUCE to declarator
declaration_specifiers declarator REDUCE to parameter_declaration
parameter_declaration REDUCE to parameter_list
parameter_list REDUCE to parameter_type_list
direct_declarator OPAREN parameter_type_list CPAREN to direct_declarator
Scanner: token [{]
direct_declarator REDUCE to declarator
Scanner: token [}]
OCURLY CCURLY REDUCE to compound_statement
declaration_specifiers declarator compound_statement REDUCE to function_definition
function_definition REDUCE to external_declaration
translation_unit external_declaration REDUCE to translation_unit
Number of entries in programData table: 3
Parse complete. Result = 0
